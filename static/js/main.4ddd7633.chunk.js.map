{"version":3,"sources":["helpers/errorHandling.js","helpers/errorBoundary.js","components/Code.js","state/utils/createReducer.js","components/Header.js","components/App.js","state/utils/fetch.js","state/ducks/ipfs/reducers.js","state/ducks/ipfs/types.js","state/ducks/ipfs/actions.js","state/ducks/ipfs/index.js","containers/App.js","state/middlewares/apiService.js","state/middlewares/logger.js","helpers/serviceWorker.js","index.js","state/store.js"],"names":["R","require","errors","codeMirror","header","_wrong","messages","displayRandomMessageFromArray","list","type","Math","floor","random","length","errorHandling","reason","arguments","undefined","message","response","tryCatch","Boolean","ok","Error","statusText","ErrorBoundary","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","error","details","setState","react_default","a","createElement","id","displayError","toString","componentStack","children","Component","initialState","reducerMap","options","lineNumbers","mode","Code","_ref","_ref$code","code","handler","errorBoundary_ErrorBoundary","Codemirror_default","value","onChange","Header","_ref$gist","gist","saver","className","onClick","App","saveFunc","console","log","handleChange","gistGetAddress","location","pathname","_this$props","ipfs","ipfsSetup","ipfsFetch","data","componentReady","address","others","components_Header","components_Code","parseStatus","status","res","Promise","resolve","reject","then","x","JSON","parse","e","jsonParse","concat","ipfsReducer","_createReducer","defineProperty","action","assign","payload","reducer","combineReducers","getFirstSegment","compose","nth","split","gistAddress","path","meta","async","blocking","method","body","arg","ipfsUpdate","asyncToGenerator","regenerator_default","mark","_callee","dispatch","wrap","_context","prev","next","stop","_x","apply","mapDispatchToProps","ipfsOperations","connect","apiService","result","_action$meta","_action$meta$method","auth","url","_headers","headers","objectSpread","Accept","stringify","isomorphicFetch","text","fetch","handleResponse","err","handleErrors","REGULAR","join","SUCCESS","STARTED","FAILURE","createLogger","active","store","prevState","getState","nextState","groupCollapsed","info","logGroupCollapsed","indexOf","determineStyle","logInfo","groupEnd","logGroupEnd","_console","window","hostname","match","reduxStore","rootReducer","reducers","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","createStore","applyMiddleware","thunk","immutableStateInvariantMiddleware","ipfsBundle","tryCompanion","tryWindow","tryApi","tryJsIpfs","getJsIpfs","configureStore","ReactDOM","render","es","BrowserRouter","basename","Route","component","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.4ddd7633.chunk.js","sourcesContent":["const R = require('ramda')\n\nfunction handleErrors (response) {\n  const tryer = (response) => Boolean(response.ok)\n  const catcher = (response) => { throw Error(response.statusText) }\n  R.tryCatch(tryer, catcher)(response)\n}\n\nconst errors = { // Possibly funny list of possible error messages\n  codeMirror: [\n    'External plugin CodeMirror made a HUGE mistake',\n    'CodeMirror reflects nothing!'\n  ],\n  header: [\n    'No header today',\n    'Save buttons are missed'\n  ],\n  _wrong: [ // error(s) for wrong error reason\n    'Really sad, but there is an error in the error message. Sorry.'\n  ]\n}\n\nconst messages = {\n  _wrong: [ // message(s) for wrong error reason\n    'Really sad, but there is an error in the error message. Sorry.'\n  ]\n}\n\nexport function displayMessage (message = 'others') {\n  return displayRandomMessageFromArray(messages, message)\n}\n\nexport function displayError (reason = 'others') {\n  return displayRandomMessageFromArray(errors, reason)\n}\n\nfunction displayRandomMessageFromArray (list, type) {\n  const messages = list[type] || list['_wrong']\n  const random = Math.floor(Math.random() * Math.floor(messages.length))\n  return messages[random]\n}\n\nexport default [\n  errors,\n  messages,\n  displayError,\n  displayMessage,\n  handleErrors\n]\n","import React, { Component } from 'react'\nimport displayError from './errorHandling'\n\nexport default class ErrorBoundary extends Component {\n  constructor (props) {\n    super(props)\n    this.state = {\n      error: null,\n      details: null\n    }\n  }\n\n  componentDidCatch (error, details) {\n    this.setState({error, details})\n  }\n\n  render () {\n    const reason = this.props && this.props.reason\n\n    if (this.state.error) {\n      return (\n        <div id='errorBlock'>\n          <h2>Oh-no! Something went wrong</h2>\n          { reason && <h3>{displayError(reason)} </h3> }\n          <section>\n            <h4>{this.state.error && this.state.error.toString()} stack</h4>\n            <pre><code>\n              {this.state.details.componentStack}\n            </code></pre>\n          </section>\n        </div>\n      )\n    }\n    return this.props.children\n  }\n}\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport errors from '../helpers/errorHandling'\nimport ErrorBoundary from '../helpers/errorBoundary'\nimport CodeMirror from 'react-codemirror'\nrequire('codemirror/mode/javascript/javascript')\nrequire('codemirror/mode/xml/xml')\nrequire('codemirror/mode/markdown/markdown')\nrequire('codemirror/lib/codemirror.css')\n\nconst options = {\n  lineNumbers: true,\n  mode: 'javascript'\n}\n\nconst Code = ({ code = '/* ES5 highlighting only */', handler }) => {\n  return (\n    <ErrorBoundary reason={errors.codeMirror}>\n      <CodeMirror\n        value={code}\n        options={options}\n        onChange={(code) => handler(code)}\n      />\n    </ErrorBoundary>\n  )\n}\n\nCode.propTypes = {\n  code: PropTypes.string\n}\n\nexport default Code\n","export default (initialState, reducerMap) => (state = initialState, action) => {\n  const reducer = reducerMap[action.type]\n  return reducer ? reducer(state, action) : state\n}\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport errors from '../helpers/errorHandling'\nimport ErrorBoundary from '../helpers/errorBoundary'\n\nconst Header = ({ gist: header = 'new', code, saver }) => {\n  return (\n    <ErrorBoundary reason={errors.header}>\n      <h1>Gist <span className={'gistName'}>{header}</span></h1>\n      <button\n        onClick={(code) => saver(code)}\n      >Save</button>\n    </ErrorBoundary>\n  )\n}\n\nHeader.propTypes = {\n  gist: PropTypes.string,\n  code: PropTypes.string,\n  saver: PropTypes.func.isRequired\n}\n\nexport default Header\n","import React, { Component } from 'react'\nimport Code from './Code'\nimport Header from './Header'\nimport ErrorBoundary from '../helpers/errorBoundary'\nimport errors from '../helpers/errorHandling'\n\nclass App extends Component {\n  saveFunc = () => console.log(this.state.code + ' saved')\n  handleChange = (code) => this.setState({ code })\n\n  async componentDidMount () {\n    await this.props.gistGetAddress(this.props.location.pathname)\n  }\n\n  render () {\n    const { ipfs, ipfsSetup, ipfsFetch } = this.props\n    const data = ipfs && ipfs.data\n    const componentReady = Boolean(data)\n\n    if (!componentReady) return false\n\n    const gist = data && data.address\n    const code = data && data.code\n\n    gist === '' && ipfsSetup()\n    gist !== '' && ipfsFetch(gist)\n\n    return (\n      <ErrorBoundary reason={errors.others}>\n        { !componentReady && <span className={'loading'}>Loading data, please wait ...</span> }\n        { componentReady && <Header gist={gist} code={code} saver={this.saveFunc} /> }\n        { componentReady && <Code code={code} handler={this.handleChange} /> }\n      </ErrorBoundary>\n    )\n  }\n}\n\nexport default App\n","import isomorphicFetch from 'isomorphic-fetch'\n\nexport const jsonParse = x => {\n  try {\n    return JSON.parse(x)\n  } catch (e) {\n    return null\n  }\n}\n\nexport default (url, method, body, _headers) => {\n  const headers = {\n    Accept: 'application/json',\n    // 'Content-Type': 'application/json',\n    ..._headers\n  }\n  const options = {\n    method,\n    headers,\n    body: method !== 'GET' ? JSON.stringify(body) : null\n  }\n  return isomorphicFetch(url, options).then(res =>\n    parseStatus(res.status, res.text()))\n}\n\nexport const parseStatus = (status, res) => {\n  return new Promise((resolve, reject) => {\n    if (status >= 200 && status < 300) {\n      res.then(response => {\n        resolve(jsonParse(response))\n      })\n    } else {\n      res.then(response => reject(new Error(`${status}: ${response}`)))\n    }\n  })\n}\n","import { combineReducers } from 'redux'\nimport * as types from './types'\nimport { createReducer } from '../../utils'\n\nexport const ipfsReducer = createReducer(null, {\n  [types.IPFS_FETCH_COMPLETED]: (state, action) => {\n    return Object.assign({}, { address: state.address }, action.payload)\n  },\n  [types.IPFS_SETUP_COMPLETED]: (state, action) => action.payload,\n  [types.IPFS_UPDATE_COMPLETED]: (state, action) => action.payload,\n  [types.IPFS_GETADDRESS_COMPLETED]: (state, action) => action.payload\n})\n\nexport default combineReducers({ data: ipfsReducer })\n","export const IPFS_FETCH = 'IPFS_FETCH'\nexport const IPFS_FETCH_COMPLETED = 'IPFS_FETCH_COMPLETED'\nexport const IPFS_FETCH_FAILED = 'IPFS_FETCH_FAILED'\n\nexport const IPFS_SETUP = 'IPFS_SETUP'\nexport const IPFS_SETUP_COMPLETED = 'IPFS_SETUP_COMPLETED'\nexport const IPFS_SETUP_FAILED = 'IPFS_SETUP_FAILED'\n\nexport const IPFS_UPDATE = 'IPFS_UPDATE'\nexport const IPFS_UPDATE_COMPLETED = 'IPFS_UPDATE_COMPLETED'\nexport const IPFS_UPDATE_FAILED = 'IPFS_UPDATE_FAILED'\n\nexport const IPFS_GETADDRESS = 'IPFS_GETADDRESS'\nexport const IPFS_GETADDRESS_COMPLETED = 'IPFS_GETADDRESS_COMPLETED'\nexport const IPFS_GETADDRESS_FAILED = 'IPFS_GETADDRESS_FAILED'\n","import * as types from './types'\nconst R = require('ramda')\n\n// we need the second element, because:\n// element 0 is empty after split ('/URI')\nconst getFirstSegment = R.compose(R.nth(1), R.split('/'))\nconst gistAddress = path => getFirstSegment(path)\n\nexport const ipfsFetch = (address) => ({\n  type: types.IPFS_FETCH,\n  meta: {\n    async: true,\n    blocking: true,\n    path: '/api/v0/get',\n    method: 'GET',\n    body: { arg:address }\n  }\n})\n\nexport const ipfsSetup = () => ({\n  type: types.IPFS_SETUP,\n  meta: {\n    async: true,\n    blocking: true,\n    path: '/api/v0/version',\n    method: 'GET'\n  }\n})\n\nexport const ipfsUpdate = (code) => ({\n  type: types.IPFS_UPDATE,\n  meta: {\n    async: true,\n    blocking: true,\n    path: '/api/v0/add',\n    method: 'POST',\n    body: { arg: code }\n  }\n})\n\nexport const gistGetAddress = (path) => async dispatch => {\n  const address = gistAddress(path)\n\n  dispatch({\n    type: types.IPFS_GETADDRESS_COMPLETED,\n    payload: {\n      address\n    }\n  })\n}\n","import reducer from './reducers'\n\nimport * as ipfsOperations from './operations'\n\nexport { ipfsOperations }\n\nexport default reducer\n","import { connect } from 'react-redux'\nimport App from '../components/App'\nimport { ipfsOperations } from '../state/ducks/ipfs'\n\nexport const mapStateToProps = state => ({\n  ipfs: state.ipfs\n})\n\nexport const mapDispatchToProps = {\n  gistGetAddress: ipfsOperations.gistGetAddress,\n  ipfsFetch: ipfsOperations.ipfsFetch,\n  ipfsUpdate: ipfsOperations.ipfsUpdate,\n  ipfsSetup: ipfsOperations.ipfsSetup\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App)\n","import { fetch } from '../utils'\n\nconst apiService = () => next => action => {\n  const result = next(action)\n  if (!action.meta || !action.meta.async) {\n    return result\n  }\n\n  const { path, method = 'GET', body, auth } = action.meta\n\n  if (!path) {\n    throw new Error(`'path' not specified for async action ${action.type}`)\n  }\n\n  const url = `http://localhost:5001${path}`\n\n  const headers = {\n    // Authorization: auth\n  }\n\n  return fetch(url, method, body, headers).then(\n    res => handleResponse(res, action, next),\n    err => handleErrors(err, action, next)\n  )\n}\n\nexport default apiService\n\nfunction handleErrors (err, action, next) {\n  next({\n    type: `${action.type}_FAILED`,\n    payload: err,\n    meta: action.meta\n  })\n\n  return Promise.reject(err)\n}\n\nfunction handleResponse (res, action, next) {\n  next({\n    type: `${action.type}_COMPLETED`,\n    payload: res,\n    meta: action.meta\n  })\n\n  return res\n}\n","const REGULAR = ['background: blue', 'color: white'].join(';')\n\nconst SUCCESS = ['background: green', 'color: white'].join(';')\n\nconst STARTED = ['background: darkorange', 'color: white'].join(';')\n\nconst FAILURE = ['background: red', 'color: white'].join(';')\n\nconst createLogger = (active = true) => store => next => action => {\n  if (!active) {\n    return next(action)\n  }\n\n  const prevState = store.getState()\n  const result = next(action)\n  const nextState = store.getState()\n  logGroupCollapsed(`%c ${action.type} `, determineStyle(action))\n  logInfo('%cprev state', 'color: darkorange', prevState)\n  logInfo('%caction payload', 'color: blue', action.payload)\n  logInfo('%cnext state', 'color: darkgreen', nextState)\n  logGroupEnd()\n  return result\n}\n\nexport default createLogger\n\nfunction logGroupCollapsed (...args) {\n  const logFunction = typeof console.groupCollapsed === 'function'\n    ? console.groupCollapsed\n    : console.info\n  logFunction(...args)\n}\n\nfunction logGroupEnd (...args) {\n  const logFunction = typeof console.groupEnd === 'function'\n    ? console.groupEnd\n    : console.info\n  logFunction(...args)\n}\n\nfunction logInfo (...args) {\n  console.info(...args)\n}\n\nfunction determineStyle (action) {\n  if (!action.meta || !action.meta.async) {\n    return REGULAR\n  }\n\n  if (action.type.indexOf('_COMPLETED') > -1) {\n    return SUCCESS\n  }\n\n  if (action.type.indexOf('_FAILED') > -1) {\n    return FAILURE\n  }\n\n  return STARTED\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport { Provider as ReduxProvider } from 'react-redux'\nimport { BrowserRouter, Route } from 'react-router-dom'\nimport App from './containers/App'\nimport configureStore from './state/store'\nimport errors from './helpers/errorHandling'\nimport ErrorBoundary from './helpers/errorBoundary'\nimport * as serviceWorker from './helpers/serviceWorker'\n\nconst reduxStore = configureStore()\n\nReactDOM.render(\n  <ErrorBoundary reason={errors.others}>\n    <ReduxProvider store={reduxStore}>\n      <BrowserRouter basename={'/agist/'}>\n        <Route path='/*' component={App} />\n      </BrowserRouter>\n    </ReduxProvider>\n  </ErrorBoundary>,\n  document.getElementById('app')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister()\n","import { createStore, applyMiddleware, combineReducers, compose } from 'redux'\nimport thunk from 'redux-thunk'\nimport * as reducers from './ducks'\nimport { apiService, createLogger } from './middlewares'\nimport immutableStateInvariantMiddleware from 'redux-immutable-state-invariant'\nimport ipfsBundle from 'ipfs-redux-bundle'\n\nexport default function configureStore (initialState) {\n  const rootReducer = combineReducers(reducers)\n\n  const composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ ||\n    compose\n\n  return createStore(\n    rootReducer,\n    initialState,\n    composeEnhancers(\n      applyMiddleware(\n        apiService,\n        thunk,\n        createLogger(true),\n        immutableStateInvariantMiddleware()\n      )\n    ),\n    ipfsBundle({\n      // These are the defaults:\n      tryCompanion: true, // set false to bypass ipfs-companion verification\n      tryWindow: true, // set false to bypass window.ipfs verification\n      tryApi: true, // set false to bypass js-ipfs-api verification. Uses data from ipfsApi variable in localStorage\n      tryJsIpfs: false, // set true to attempt js-ipfs initialisation.\n      getJsIpfs: null // must be set to a js-ipfs instance if tryJsIpfs is true.\n    })\n  )\n}\n"],"sourceRoot":""}