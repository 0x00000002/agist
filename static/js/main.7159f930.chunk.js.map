{"version":3,"sources":["helpers/errorHandling.js","helpers/errorBoundary.js","components/Code.js","state/utils/createReducer.js","components/Header.js","components/App.js","state/utils/fetch.js","state/ducks/ipfs/reducers.js","state/ducks/ipfs/types.js","state/ducks/ipfs/actions.js","state/ducks/ipfs/index.js","containers/App.js","state/middlewares/apiService.js","state/middlewares/logger.js","helpers/serviceWorker.js","index.js","state/store.js"],"names":["R","require","errors","codeMirror","header","_wrong","messages","displayRandomMessageFromArray","list","type","Math","floor","random","length","errorHandling","reason","arguments","undefined","message","response","tryCatch","Boolean","ok","Error","statusText","ErrorBoundary","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","error","details","setState","react_default","a","createElement","id","displayError","toString","componentStack","children","Component","initialState","reducerMap","options","lineNumbers","mode","Code","_ref","code","handler","errorBoundary_ErrorBoundary","Codemirror_default","value","onChange","Header","button","isDisabled","updater","_this2","className","address","onClick","e","saveCode","disabled","App","ipfs","data","handleChange","gistGetAddress","location","pathname","ipfsFetch","_this$props$ipfs$data","others","components_Header","ipfsUpdate","components_Code","parseStatus","status","res","Promise","resolve","reject","then","concat","ipfsReducer","_createReducer","defineProperty","action","payload","assign","reducer","combineReducers","IPFS","getFirstSegment","compose","nth","split","gistAddress","path","meta","async","blocking","method","ipfsSetup","asyncToGenerator","regenerator_default","mark","_callee","dispatch","wrap","_context","prev","next","at","add","sent","stop","_x","apply","_ref2","_callee2","_context2","_x2","mapDispatchToProps","ipfsOperations","connect","apiService","result","_action$meta","_action$meta$method","body","url","_headers","headers","objectSpread","Accept","JSON","stringify","isomorphicFetch","text","fetch","handleResponse","err","handleErrors","REGULAR","join","SUCCESS","STARTED","FAILURE","createLogger","active","store","prevState","getState","nextState","console","groupCollapsed","info","logGroupCollapsed","indexOf","determineStyle","logInfo","groupEnd","logGroupEnd","_console","window","hostname","match","reduxStore","rootReducer","reducers","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","createStore","applyMiddleware","thunk","immutableStateInvariantMiddleware","configureStore","ReactDOM","render","es","BrowserRouter","basename","Route","component","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7159f930.chunk.js","sourcesContent":["const R = require('ramda')\n\nfunction handleErrors (response) {\n  const tryer = (response) => Boolean(response.ok)\n  const catcher = (response) => { throw Error(response.statusText) }\n  R.tryCatch(tryer, catcher)(response)\n}\n\nconst errors = { // Possibly funny list of possible error messages\n  codeMirror: [\n    'External plugin CodeMirror made a HUGE mistake',\n    'CodeMirror reflects nothing!'\n  ],\n  header: [\n    'No header today',\n    'Save buttons are missed'\n  ],\n  _wrong: [ // error(s) for wrong error reason\n    'Really sad, but there is an error in the error message. Sorry.'\n  ]\n}\n\nconst messages = {\n  _wrong: [ // message(s) for wrong error reason\n    'Really sad, but there is an error in the error message. Sorry.'\n  ]\n}\n\nexport function displayMessage (message = 'others') {\n  return displayRandomMessageFromArray(messages, message)\n}\n\nexport function displayError (reason = 'others') {\n  return displayRandomMessageFromArray(errors, reason)\n}\n\nfunction displayRandomMessageFromArray (list, type) {\n  const messages = list[type] || list['_wrong']\n  const random = Math.floor(Math.random() * Math.floor(messages.length))\n  return messages[random]\n}\n\nexport default [\n  errors,\n  messages,\n  displayError,\n  displayMessage,\n  handleErrors\n]\n","import React, { Component } from 'react'\nimport displayError from './errorHandling'\n\nexport default class ErrorBoundary extends Component {\n  constructor (props) {\n    super(props)\n    this.state = {\n      error: null,\n      details: null\n    }\n  }\n\n  componentDidCatch (error, details) {\n    this.setState({error, details})\n  }\n\n  render () {\n    const reason = this.props && this.props.reason\n\n    if (this.state.error) {\n      return (\n        <div id='errorBlock'>\n          <h2>Oh-no! Something went wrong</h2>\n          { reason && <h3>{displayError(reason)} </h3> }\n          <section>\n            <h4>{this.state.error && this.state.error.toString()} stack</h4>\n            <pre><code>\n              {this.state.details.componentStack}\n            </code></pre>\n          </section>\n        </div>\n      )\n    }\n    return this.props.children\n  }\n}\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport errors from '../helpers/errorHandling'\nimport ErrorBoundary from '../helpers/errorBoundary'\nimport CodeMirror from 'react-codemirror'\nrequire('codemirror/mode/javascript/javascript')\nrequire('codemirror/mode/xml/xml')\nrequire('codemirror/mode/markdown/markdown')\nrequire('codemirror/lib/codemirror.css')\n\nconst options = {\n  lineNumbers: true,\n  mode: 'javascript'\n}\n\nconst Code = ({ code, handler }) => {\n  return (\n    <ErrorBoundary reason={errors.codeMirror}>\n      <CodeMirror\n        value={code}\n        options={options}\n        onChange={(code) => handler(code)}\n      />\n    </ErrorBoundary>\n  )\n}\n\nCode.propTypes = {\n  code: PropTypes.string,\n  handler: PropTypes.func.isRequired\n}\n\nexport default Code\n","export default (initialState, reducerMap) => (state = initialState, action) => {\n  const reducer = reducerMap[action.type]\n  return reducer ? reducer(state, action) : state\n}\n","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport errors from '../helpers/errorHandling'\nimport ErrorBoundary from '../helpers/errorBoundary'\n\nclass Header extends Component {\n  state = {\n    button: 'Save',\n    isDisabled: false\n  }\n\n  async saveCode () {\n    this.setState({ button: ' saving', isDisabled: true })\n    await this.props.updater(this.props.code)\n    this.setState({ button: 'Save', isDisabled: false })\n  }\n\n  render () {\n    return (\n      <ErrorBoundary reason={errors.header}>\n        <h1>Gist <span className={'status'}>{this.props.address}</span></h1>\n        <button\n          onClick={(e) => this.saveCode()}\n          disabled={this.state.isDisabled}\n        >{this.state.button}\n        </button>\n      </ErrorBoundary>\n    )\n  }\n}\n\nHeader.propTypes = {\n  address: PropTypes.string.isRequired,\n  code: PropTypes.string,\n  updater: PropTypes.func\n}\n\nexport default Header\n","import React, { Component } from 'react'\nimport Code from './Code'\nimport Header from './Header'\nimport ErrorBoundary from '../helpers/errorBoundary'\nimport errors from '../helpers/errorHandling'\n\nclass App extends Component {\n  state = {\n    code: this.props.ipfs && this.props.ipfs.data && this.props.ipfs.data.code\n  }\n\n  handleChange = (code) => this.setState({ code })\n\n  async componentDidMount () {\n    await this.props.gistGetAddress(this.props.location.pathname)\n    await this.props.ipfsFetch(this.props.ipfs.data.address)\n    this.setState({ code: this.props.ipfs.data.code })\n  }\n\n  render () {\n    const { ipfs: { data: { code, address } } } = this.props\n\n    return (\n      <ErrorBoundary reason={errors.others}>\n        { !code && <span className={'loading'}>Loading gist, please wait ...</span> }\n        { code &&\n          <div>\n            <Header address={address} code={this.state.code} updater={this.props.ipfsUpdate} />\n            <Code code={code} handler={this.handleChange} />\n          </div>\n        }\n      </ErrorBoundary>\n    )\n  }\n}\n\nexport default App\n","import isomorphicFetch from 'isomorphic-fetch'\n\nexport const jsonParse = x => {\n  try {\n    return JSON.parse(x)\n  } catch (e) {\n    return null\n  }\n}\n\nexport default (url, method, body, _headers) => {\n  const headers = {\n    Accept: 'application/json',\n    // 'Content-Type': 'application/json',\n    ..._headers\n  }\n  const options = {\n    method,\n    headers,\n    body: method !== 'GET' ? JSON.stringify(body) : null\n  }\n  return isomorphicFetch(url, options).then(res =>\n    parseStatus(res.status, res.text()))\n}\n\nexport const parseStatus = (status, res) => {\n  return new Promise((resolve, reject) => {\n    if (status >= 200 && status < 300) {\n      res.then(response => {\n        resolve(response)\n      })\n    } else {\n      res.then(response => reject(new Error(`${status}: ${response}`)))\n    }\n  })\n}\n","import { combineReducers } from 'redux'\nimport * as types from './types'\nimport { createReducer } from '../../utils'\n\nexport const ipfsReducer = createReducer({}, {\n  [types.IPFS_FETCH_COMPLETED]: (state, action) => {\n    let code = action.payload || '/* ES5 highlighting only */'\n    let address = state.address || 'new'\n    return Object.assign({}, state, { code }, { address })\n  },\n  [types.IPFS_SETUP_COMPLETED]: (state, action) => action.payload,\n  [types.IPFS_UPDATE_COMPLETED]: (state, action) => action.payload,\n  [types.IPFS_GETADDRESS_COMPLETED]: (state, action) => action.payload\n})\n\nexport default combineReducers({ data: ipfsReducer })\n","export const IPFS_FETCH = 'IPFS_FETCH'\nexport const IPFS_FETCH_COMPLETED = 'IPFS_FETCH_COMPLETED'\nexport const IPFS_FETCH_FAILED = 'IPFS_FETCH_FAILED'\n\nexport const IPFS_SETUP = 'IPFS_SETUP'\nexport const IPFS_SETUP_COMPLETED = 'IPFS_SETUP_COMPLETED'\nexport const IPFS_SETUP_FAILED = 'IPFS_SETUP_FAILED'\n\nexport const IPFS_UPDATE = 'IPFS_UPDATE'\nexport const IPFS_UPDATE_COMPLETED = 'IPFS_UPDATE_COMPLETED'\nexport const IPFS_UPDATE_FAILED = 'IPFS_UPDATE_FAILED'\n\nexport const IPFS_GETADDRESS = 'IPFS_GETADDRESS'\nexport const IPFS_GETADDRESS_COMPLETED = 'IPFS_GETADDRESS_COMPLETED'\nexport const IPFS_GETADDRESS_FAILED = 'IPFS_GETADDRESS_FAILED'\n","import * as types from './types'\nconst R = require('ramda')\nconst IPFS = require('nano-ipfs-store')\n\n// we need the second element, because:\n// element 0 is empty after split ('/URI')\nconst getFirstSegment = R.compose(R.nth(1), R.split('/'))\nexport const gistAddress = path => getFirstSegment(path)\n\nexport const ipfsFetch = (address) => {\n  if (!address) {\n    return {\n      type: `${types.IPFS_FETCH}_COMPLETED`\n    }\n  }\n  return {\n    type: types.IPFS_FETCH,\n    meta: {\n      async: true,\n      blocking: true,\n      path: `/api/v0/cat?arg=${address}`,\n      method: 'GET'\n    }\n  }\n}\n\nexport const ipfsSetup = () => ({\n  type: types.IPFS_SETUP,\n  meta: {\n    async: true,\n    blocking: true,\n    path: '/api/v0/version',\n    method: 'GET'\n  }\n})\n\nexport const ipfsUpdate = (code) => async dispatch => {\n  const ipfs = IPFS.at('https://ipfs.infura.io:5001')\n  const address = await ipfs.add(code)\n\n  dispatch({\n    type: types.IPFS_UPDATE_COMPLETED,\n    payload: {\n      address,\n      code\n    }\n  })\n}\n\nexport const gistGetAddress = (path) => async dispatch => {\n  const address = gistAddress(path)\n\n  dispatch({\n    type: types.IPFS_GETADDRESS_COMPLETED,\n    payload: { address }\n  })\n}\n","import reducer from './reducers'\n\nimport * as ipfsOperations from './operations'\n\nexport { ipfsOperations }\n\nexport default reducer\n","import { connect } from 'react-redux'\nimport App from '../components/App'\nimport { ipfsOperations } from '../state/ducks/ipfs'\n\nexport const mapStateToProps = state => ({\n  ipfs: state.ipfs\n})\n\nexport const mapDispatchToProps = {\n  gistGetAddress: ipfsOperations.gistGetAddress,\n  ipfsFetch: ipfsOperations.ipfsFetch,\n  ipfsUpdate: ipfsOperations.ipfsUpdate,\n  ipfsSetup: ipfsOperations.ipfsSetup\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App)\n","import { fetch } from '../utils'\n\nconst apiService = () => next => action => {\n  const result = next(action)\n  if (!action.meta || !action.meta.async) {\n    return result\n  }\n\n  const { path, method = 'GET', body } = action.meta\n\n  if (!path) {\n    throw new Error(`'path' not specified for async action ${action.type}`)\n  }\n\n  // ipfs config --json API.HTTPHeaders.Access-Control-Allow-Origin '[\"*\"]'\n  // const url = `http://127.0.0.1:5001${path}`\n  const url = `https://ipfs.infura.io:5001${path}`\n\n  const fetchResult = fetch(url, method, body).then(\n    res => handleResponse(res, action, next),\n    err => handleErrors(err, action, next)\n  )\n  return fetchResult\n}\n\nexport default apiService\n\nfunction handleErrors (err, action, next) {\n  next({\n    type: `${action.type}_FAILED`,\n    payload: err,\n    meta: action.meta\n  })\n\n  return Promise.reject(err)\n}\n\nfunction handleResponse (res, action, next) {\n  next({\n    type: `${action.type}_COMPLETED`,\n    payload: res,\n    meta: action.meta\n  })\n\n  return res\n}\n","const REGULAR = ['background: blue', 'color: white'].join(';')\n\nconst SUCCESS = ['background: green', 'color: white'].join(';')\n\nconst STARTED = ['background: darkorange', 'color: white'].join(';')\n\nconst FAILURE = ['background: red', 'color: white'].join(';')\n\nconst createLogger = (active = true) => store => next => action => {\n  if (!active) {\n    return next(action)\n  }\n\n  const prevState = store.getState()\n  const result = next(action)\n  const nextState = store.getState()\n  logGroupCollapsed(`%c ${action.type} `, determineStyle(action))\n  logInfo('%cprev state', 'color: darkorange', prevState)\n  logInfo('%caction payload', 'color: blue', action.payload)\n  logInfo('%cnext state', 'color: darkgreen', nextState)\n  logGroupEnd()\n  return result\n}\n\nexport default createLogger\n\nfunction logGroupCollapsed (...args) {\n  const logFunction = typeof console.groupCollapsed === 'function'\n    ? console.groupCollapsed\n    : console.info\n  logFunction(...args)\n}\n\nfunction logGroupEnd (...args) {\n  const logFunction = typeof console.groupEnd === 'function'\n    ? console.groupEnd\n    : console.info\n  logFunction(...args)\n}\n\nfunction logInfo (...args) {\n  console.info(...args)\n}\n\nfunction determineStyle (action) {\n  if (!action.meta || !action.meta.async) {\n    return REGULAR\n  }\n\n  if (action.type.indexOf('_COMPLETED') > -1) {\n    return SUCCESS\n  }\n\n  if (action.type.indexOf('_FAILED') > -1) {\n    return FAILURE\n  }\n\n  return STARTED\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport { Provider as ReduxProvider } from 'react-redux'\nimport { BrowserRouter, Route } from 'react-router-dom'\nimport App from './containers/App'\nimport configureStore from './state/store'\nimport errors from './helpers/errorHandling'\nimport ErrorBoundary from './helpers/errorBoundary'\nimport * as serviceWorker from './helpers/serviceWorker'\n\nconst reduxStore = configureStore()\n\nReactDOM.render(\n  <ErrorBoundary reason={errors.others}>\n    <ReduxProvider store={reduxStore}>\n      <BrowserRouter basename={'/agist/'}>\n        <Route path='/*' component={App} />\n      </BrowserRouter>\n    </ReduxProvider>\n  </ErrorBoundary>,\n  document.getElementById('app')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister()\n","import { createStore, applyMiddleware, combineReducers, compose } from 'redux'\nimport thunk from 'redux-thunk'\nimport * as reducers from './ducks'\nimport { apiService, createLogger } from './middlewares'\nimport immutableStateInvariantMiddleware from 'redux-immutable-state-invariant'\n\nexport default function configureStore (initialState) {\n  const rootReducer = combineReducers(reducers)\n\n  const composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ ||\n    compose\n\n  return createStore(\n    rootReducer,\n    initialState,\n    composeEnhancers(\n      applyMiddleware(\n        apiService,\n        thunk,\n        createLogger(true),\n        immutableStateInvariantMiddleware()\n      )\n    )\n  )\n}\n"],"sourceRoot":""}